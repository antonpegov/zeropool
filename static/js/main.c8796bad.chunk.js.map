{"version":3,"sources":["assets/images/guy-fawkes-thanks.png","serviceWorker.ts","wellcome/state/wellcome-page.actions.ts","wellcome/state/wellcome-page.reducers.ts","common/operators/filter-actions.operator.ts","wellcome/state/wellcome-page.epics.ts","shared/state.ts","shared/state-migrations.ts","wellcome/containers/wellcome-page/wellcome-page.component.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","wellcomePageActions","test1","create","test2","wellcomePageReducer","createReducer","showBanner","handleAction","state","filterActions","actionCreators","isOneAction","length","argument","pipe","filter","isActionOf","wellcomePageEpics","combineEpics","action$","state$","tap","payload","console","log","ignoreElements","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","rootEpic","run","history","createBrowserHistory","persistConfig","key","version","storage","migrate","createMigrate","debug","whitelist","persistedReducer","persistReducer","combineReducers","wellcomePage","router","connectRouter","shared","store","createStore","applyMiddleware","routerMiddleware","persistedStore","persistStore","css","cn","ReactDOM","render","StrictMode","persistor","path","exact","component","className","src","logo","alt","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,+C,0LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0FCfOC,EAAsB,CACjCC,MAAOC,uBAAO,6BAAPA,GACPC,MAAOD,uBAAO,6BAAPA,ICOIE,EAAsBC,wBAJK,CACtCC,YAAY,IAOXC,aAAaP,EAAoBC,OAAO,SAAAO,GAAK,kCACzCA,GADyC,IAE5CF,YAAY,OAEbC,aAAaP,EAAoBG,OAAO,SAAAK,GAAK,kCACzCA,GADyC,IAE5CF,YAAY,O,gCCdHG,EAAgB,WAEvB,IAAD,uBADAC,EACA,yBADAA,EACA,gBACH,IAAMC,EAAwC,IAA1BD,EAAeE,OAC7BC,EAAWF,EAAcD,EAAe,GAAKA,EACnD,OAAOI,YAAKC,YAAOC,qBAAWH,MCuBnBI,EAA0BC,aAvBlB,SACnBC,EACAC,GAFmB,OAInBD,EAAQL,KACNL,EAAcT,EAAoBC,OAClCoB,aAAI,SAAAC,GACFC,QAAQC,IAAIF,MAEdG,kBAGiB,SACnBN,EACAC,GAFmB,OAInBD,EAAQL,KACNL,EAAcT,EAAoBG,OAClCkB,aAAI,SAAAC,GACFC,QAAQC,IAAIF,UCVZI,EAFkB9B,OAAO+B,sCAEaC,IAKtCC,EAAiBC,cAEjBC,EAAWb,YACfD,GAMFY,EAAeG,IAAID,GAQZ,IAE2BE,EAFrBA,EAAUC,cAgBjBC,EAA0C,CAC9CC,IAAK,OACLC,QAAS,EACTC,YACAC,QAASC,YC/DoB,GD+DW,CAAEC,OAAO,IACjDC,UAAW,CAAC,iBAGRC,EAAmBC,YACvBT,GAvBgCF,EAwBdA,EAvBlBY,YAAgB,CACdC,aAAc1C,EAEd2C,OAAQC,YAAcf,GACtBgB,OAAQJ,YAAgB,QAsBfK,EAAQC,YACnBR,EACAjB,EAAiB0B,YAAgBvB,EAAgBwB,YAAiBpB,MAGvDqB,EAAiBC,YAAaL,G,iCExErCM,EAAMC,aAAG,gBCQfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,CAAaW,UAAWP,GACtB,kBAAC,IAAD,CAAiBrB,QAASA,GACxB,kBAAC,IAAD,CAAQA,QAASA,GACf,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAK,EAACC,UDZa,WAE7C,OACE,uBAAKC,UAAWT,KACd,0BAAQS,UAAWT,EAAI,WACrB,uBAAKU,IAAKC,IAAMF,UAAWT,EAAI,QAASY,IAAI,SAC5C,4DCYNC,SAASC,eAAe,SRiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.c8796bad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guy-fawkes-thanks.0609f8d3.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport { createAction as create } from 'typesafe-actions';\r\n\r\nexport const wellcomePageActions = {\r\n  test1: create('@wellcomePageActions/test1')<void>(),\r\n  test2: create('@wellcomePageActions/test2')<void>(),\r\n};\r\n","import { ActionType, createReducer } from 'typesafe-actions';\r\n\r\nimport { wellcomePageActions } from 'wellcome/state/wellcome-page.actions';\r\n\r\nexport interface WellcomePageState {\r\n  showBanner: boolean;\r\n}\r\n\r\nconst initialState: WellcomePageState = {\r\n  showBanner: true,\r\n};\r\n\r\nexport const wellcomePageReducer = createReducer<\r\n  WellcomePageState,\r\n  ActionType<typeof wellcomePageActions>\r\n>(initialState)\r\n  .handleAction(wellcomePageActions.test1, state => ({\r\n    ...state,\r\n    showBanner: false,\r\n  }))\r\n  .handleAction(wellcomePageActions.test2, state => ({\r\n    ...state,\r\n    showBanner: true,\r\n  }));\r\n","import { pipe } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ActionCreator, isActionOf } from 'typesafe-actions';\r\n\r\n/**\r\n * @todo check this operator, because it swallow\r\n * action payload type when used for single action\r\n */\r\nexport const filterActions = <T extends string>(\r\n  ...actionCreators: ActionCreator<T>[]\r\n) => {\r\n  const isOneAction = actionCreators.length === 1;\r\n  const argument = isOneAction ? actionCreators[0] : actionCreators;\r\n  return pipe(filter(isActionOf(argument)));\r\n};\r\n","import { Observable } from \"rxjs\";\r\nimport { ActionType } from 'typesafe-actions';\r\nimport { Epic, combineEpics } from \"redux-observable\";\r\nimport { tap, ignoreElements } from 'rxjs/operators';\r\n\r\nimport { wellcomePageActions } from \"wellcome/state/wellcome-page.actions\";\r\n\r\nimport { filterActions } from 'common/operators/filter-actions.operator';\r\n\r\nimport { RootState } from \"shared/state\";\r\n\r\ntype Actions = ActionType<typeof wellcomePageActions>;\r\n\r\nconst test1$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filterActions(wellcomePageActions.test1),\r\n    tap(payload => {\r\n      console.log(payload);\r\n    }),\r\n    ignoreElements(),\r\n  );\r\n\r\nconst test2$: Epic = (\r\n  action$: Observable<Actions>,\r\n  state$: Observable<RootState>,\r\n) =>\r\n  action$.pipe(\r\n    filterActions(wellcomePageActions.test2),\r\n    tap(payload => {\r\n      console.log(payload);\r\n    }),\r\n  );\r\n\r\nexport const wellcomePageEpics: Epic = combineEpics(\r\n  test1$,\r\n  test2$,\r\n)","import storage from 'redux-persist/lib/storage';\r\nimport { PersistConfig } from 'redux-persist/es/types';\r\nimport { createBrowserHistory, History } from 'history';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\r\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist';\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\n\r\nimport { wellcomePageReducer } from 'wellcome/state/wellcome-page.reducers';\r\nimport { wellcomePageEpics } from 'wellcome/state/wellcome-page.epics';\r\n\r\nimport { stateMigrations } from 'shared/state-migrations';\r\n\r\n//#region Setup Devtools \r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: <R>(a: R) => R;\r\n  }\r\n}\r\n\r\nconst devToolsCompose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\n\r\nconst composeEnhancers = devToolsCompose || compose;\r\n//#endregion\r\n\r\n//#region Setup Epics\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\nconst rootEpic = combineEpics(\r\n  wellcomePageEpics,\r\n  // walletPageEpics,\r\n  // alertsEpics,\r\n  // notificationsEpics,\r\n);\r\n\r\nepicMiddleware.run(rootEpic);\r\n//#endregion \r\n\r\n//#region Setup Reducers\r\nexport type RootState = NonNullable<\r\n  Parameters<ReturnType<typeof createRootReducer>>[0]\r\n>;\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nexport const createRootReducer = (history: History) =>\r\n  combineReducers({\r\n    wellcomePage: wellcomePageReducer,\r\n    // walletPage: walletPageReducer,\r\n    router: connectRouter(history),\r\n    shared: combineReducers({\r\n      // alerts: alertsReducer,\r\n      // notifications: notificationsReducer,\r\n      // menuBar: menuBarReducer,\r\n    })\r\n  });\r\n//#endregion\r\n\r\n//#region Setup Persisted Store\r\nconst persistConfig: PersistConfig<RootState> = {\r\n  key: 'root',\r\n  version: 1,\r\n  storage,\r\n  migrate: createMigrate(stateMigrations, { debug: false }),\r\n  whitelist: ['wellcomePage'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  createRootReducer(history),\r\n);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history))),\r\n);\r\n\r\nexport const persistedStore = persistStore(store);\r\n//#endregion\r\n","// @todo check maybe it is possible to get rid of any.\r\nexport const stateMigrations = {\r\n\r\n};\r\n","import * as React from 'react';\r\nimport { cn } from '@bem-react/classname';\r\n\r\nimport './wellcome-page.component.scss';\r\nimport logo from 'assets/images/guy-fawkes-thanks.png';\r\n\r\nconst css = cn('WellcomePage');\r\n\r\nexport const WellcomePageComponent: React.FC = () => {\r\n\r\n  return (\r\n    <div className={css()}>\r\n      <header className={css('Header')}>\r\n        <img src={logo} className={css('Logo')} alt=\"logo\" />\r\n        <h1>\r\n          Wellcome to ZeroPool\r\n      </h1>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport { store, history, persistedStore } from 'shared/state';\n\nimport { WellcomePageComponent } from 'wellcome/containers/wellcome-page/wellcome-page.component';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistedStore}>\n        <ConnectedRouter history={history}>\n          <Router history={history}>\n            <Route path=\"/\" exact component={WellcomePageComponent} />\n          </Router>\n        </ConnectedRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}